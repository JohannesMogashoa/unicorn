@page "/login"
@inject NavigationManager NavigationManager

<h1>Log in</h1>
<div class="row">
	<div class="col-md-4">
		<section>
			<StatusMessage Message="@errorMessage"/>
			<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
				<DataAnnotationsValidator/>
				<h2>Use a local account to log in.</h2>
				<hr/>
				<ValidationSummary class="text-danger" role="alert"/>
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true"/>
					<label for="email" class="form-label">Email</label>
					<ValidationMessage For="() => Input.Username" class="text-danger"/>
				</div>
				<div class="form-floating mb-3">
					<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
					<label for="password" class="form-label">Password</label>
					<ValidationMessage For="() => Input.Password" class="text-danger"/>
				</div>
				<div>
					<button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
				</div>
			</EditForm>
		</section>
	</div>
</div>

@code {
	private string? errorMessage;
	[CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
	[SupplyParameterFromForm] private LoginRequest Input { get; set; } = new ()
	{
		Password = string.Empty,
		Username = string.Empty
	};
	[SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
	[Inject] private IAuthenticationService AuthenticationService { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			await AuthenticationService.LogoutAsync();
		}
	}

	public async Task LoginUser()
	{
		var result = await AuthenticationService.LoginAsync(Input.Username, Input.Password);

		if (result.Token != null)
		{
			NavigationManager.NavigateTo(ReturnUrl ?? "/");
		}

		errorMessage = "Failed to login";
	}
}